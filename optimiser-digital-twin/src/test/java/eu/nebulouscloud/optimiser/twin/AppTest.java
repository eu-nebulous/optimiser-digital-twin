/*
 * This source file was generated by the Gradle 'init' task
 */
package eu.nebulouscloud.optimiser.twin;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;

class AppTest {

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final ObjectMapper yaml_mapper = new ObjectMapper(new YAMLFactory());

    // Set the current directory for ABS to find its databases during testing
    @TempDir Path tempDir;
    private String originalUserDir;

    @BeforeEach
    void setUp() {
        originalUserDir = System.getProperty("user.dir");
        System.setProperty("user.dir", tempDir.toString());
    }

    @AfterEach
    void tearDown() {
        System.setProperty("user.dir", originalUserDir);
    }

    @Test void runAbs() throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(outputStream);
        PrintStream originalOut = System.out;
        try {
            System.setOut(printStream);
            Twin.Main.main(new String[0]);
        } finally {
            System.setOut(originalOut);
        }
        // // TODO: fix capturing of output, then activate the test
        // String output = outputStream.toString();
        // assertEquals("Hello world!", output);
    }

    @Test void parseDSLMessage() throws IOException, URISyntaxException {
        URL resourceURL = AppTest.class.getClassLoader().getResource("app-creation-message.json");
        JsonNode dslMessage = mapper.readTree(resourceURL);
        NebulousApp app = NebulousApp.fromAppMessage(dslMessage);
        assertNotNull(app);
        String uuid = app.getUuid();
        assertNotNull(NebulousApp.fromUuid(uuid));
    }

    @Test void invalidSolverSolution() throws IOException {
        URL resourceURL = AppTest.class.getClassLoader().getResource("app-creation-message.json");
        JsonNode dslMessage = mapper.readTree(resourceURL);
        NebulousApp app = NebulousApp.fromAppMessage(dslMessage);
        assertNotNull(app);
        URL solutionURL = AppTest.class.getClassLoader().getResource("sample-solution-missing-app-id.json");
        JsonNode solutionMessage = mapper.readTree(solutionURL);
        assertFalse(DeploymentImporter.saveSolverSolution(Path.of("config.db"), app, solutionMessage));
    }

    @Test void createScenarioFromDSLandSolverMessage() throws IOException, SQLException {
        Path db = Path.of(tempDir.toString(), "config.db");
        URL resourceURL = AppTest.class.getClassLoader().getResource("app-creation-message.json");
        JsonNode dslMessage = mapper.readTree(resourceURL);
        NebulousApp app = NebulousApp.fromAppMessage(dslMessage);
        assertNotNull(app);
        URL solutionURL = AppTest.class.getClassLoader().getResource("sample-solution.json");
        JsonNode solutionMessage = mapper.readTree(solutionURL);
        assertTrue(DeploymentImporter.saveSolverSolution(db, app, solutionMessage));
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:" + db.toString());
             Statement statement = connection.createStatement()) {
            ResultSet result = statement.executeQuery(
                "SELECT * FROM scenario WHERE component = 'license-plate-reading-service'");
            assertTrue(result.next());
            assertEquals("license-plate-reading-service", result.getString(1)); // component
            assertEquals(4, result.getInt(2));    // cpu
            assertEquals(4096, result.getInt(3)); // memory
            assertEquals(8, result.getInt(4));    // replicas
            assertFalse(result.next());
        }
    }

    @Test void createScenarioFromDSLMessage() throws IOException, SQLException {
        Path db = Path.of(tempDir.toString(), "config.db");
        URL resourceURL = AppTest.class.getClassLoader().getResource("app-creation-message.json");
        JsonNode dslMessage = mapper.readTree(resourceURL);
        NebulousApp app = NebulousApp.fromAppMessage(dslMessage);
        assertNotNull(app);
        assertTrue(DeploymentImporter.saveSolverSolution(db, app, null));
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:" + db.toString());
             Statement statement = connection.createStatement()) {
            ResultSet result = statement.executeQuery(
                "SELECT * FROM scenario WHERE component = 'license-plate-reading-service'");
            assertTrue(result.next());
            assertEquals("license-plate-reading-service", result.getString(1)); // component
            assertEquals(2, result.getInt(2));    // cpu
            assertEquals(1024, result.getInt(3)); // memory
            assertEquals(1, result.getInt(4));    // replicas
            assertFalse(result.next());
        }
    }
}
