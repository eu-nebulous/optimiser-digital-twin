plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // This plugin creates a self-contained jar file including all dependencies
    id 'com.gradleup.shadow' version '8.3.9'
    // Use this to check for newer versions of dependency libraries via
    // ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.52.0"
    // add jshell support (https://github.com/mrsarm/jshell-plugin):
    // rlwrap ./gradlew --console plain jshell
    id "com.github.mrsarm.jshell.plugin" version "1.2.1"
    // https://docs.freefair.io/gradle-plugins/8.4/reference/#_lombok
    id "io.freefair.lombok" version "8.14.2"
}

repositories {
    mavenCentral()

    // NebulOuS-developed components
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        content {
            includeModule("eu.nebulouscloud", "exn-connector-java")
        }
    }
}

// Use Gradle's cache directory for downloaded files
ext {
    absToolsDir = new File("${gradle.gradleUserHomeDir}/caches/abstools")
}

dependencies {
    // JSON parsing, also used by the data classes defined in sal-common:
    // https://github.com/FasterXML/jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    // YAML parsing: https://github.com/FasterXML/jackson-dataformats-text
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.0'

    // Command-line parsing: https://picocli.info
    implementation ('info.picocli:picocli:4.7.7')

    // The ABS compiler
    implementation files(new File(project.ext.absToolsDir, "absfrontend.jar"))

    // Logging: SLF4J (implemented by Logback)
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    // Include logstash-logback-encoder for JSON formatting
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'

    // SQLite library
    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'

    // the EXN Middleware:
    // https://openproject.nebulouscloud.eu/projects/nebulous-collaboration-hub/wiki/asynchronous-messaging-specification
    implementation('eu.nebulouscloud:exn-connector-java:1.0-SNAPSHOT') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        changing = true
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'
}

task downloadAbsFrontend {
    description 'Downloads the latest absfrontend.jar from GitHub releases'
    def taskAbsToolsDir = project.ext.absToolsDir
    def taskAbsDownloadsDir = new File(taskAbsToolsDir, "/downloads")

    doLast {
        logger.lifecycle("Checking for latest absfrontend.jar...")
        taskAbsDownloadsDir.mkdirs()
        def apiUrl = new java.net.URL("https://api.github.com/repos/abstools/abstools/releases/latest")
        def connection = apiUrl.openConnection()
        // GitHub API may require a User-Agent header
        connection.setRequestProperty("User-Agent", "Gradle Build")

        def jsonText = connection.getInputStream().getText()
        def json = new groovy.json.JsonSlurper().parseText(jsonText)
        def version = json.tag_name.toString()
        if (version.startsWith('v')) {
            version = version.substring(1)  // Remove 'v' prefix if present
        }
        def jarAsset = json.assets.find { it.name == "absfrontend.jar" }
        if (jarAsset) {
            def versionedJarName = "absfrontend-${version}.jar"
            def versionedJarFile = new File(taskAbsDownloadsDir, versionedJarName)
            def jarFile = new File(taskAbsToolsDir, "absfrontend.jar")
            if (versionedJarFile.exists()) {
                logger.lifecycle("Version ${version} already downloaded at ${versionedJarFile.absolutePath}")
            } else {
                def downloadUrl = jarAsset.browser_download_url
                logger.lifecycle("Found latest version ${version} at: ${downloadUrl}")
                // Delete any previous absfrontend jar files
                taskAbsDownloadsDir.listFiles().each { file ->
                    if (file.name.startsWith("absfrontend-") && file.name.endsWith(".jar")) {
                        logger.lifecycle("Deleting old version: ${file.name}")
                        file.delete()
                    }
                }
                def jarConnection = new java.net.URL(downloadUrl).openConnection()
                jarConnection.setRequestProperty("User-Agent", "Gradle Build")
                try (def inputStream = jarConnection.getInputStream()) {
                    java.nio.file.Files.copy(inputStream, versionedJarFile.toPath(),
                                             java.nio.file.StandardCopyOption.REPLACE_EXISTING)
                }
                logger.lifecycle("Successfully downloaded absfrontend.jar version ${version} to ${versionedJarFile.absolutePath}")
            }
            java.nio.file.Files.copy(versionedJarFile.toPath(), jarFile.toPath(),
                                     java.nio.file.StandardCopyOption.REPLACE_EXISTING)
            logger.lifecycle("Copied ${versionedJarFile.absolutePath} to ${jarFile.absolutePath}")
        } else {
            throw new GradleException("Could not find absfrontend.jar in the latest release")
        }
    }
}

// Compile ABS
task compileAbs(type: Exec, dependsOn: downloadAbsFrontend) {
    description = 'Compiles ABS.'
    inputs.dir 'src/main/abs'
    outputs.dir 'build/abs'
    commandLine 'java', '-jar', project.ext.absToolsDir.toString() + '/absfrontend.jar', '--java', '-d', 'build/abs/', '--sourceonly',
        *fileTree(dir: 'src/main/abs', include: '**/*.abs').collect { it.absolutePath }
}

// Also, add build/abs to the runtime classpath
sourceSets {
    main {
        java {
            srcDirs 'build/abs'
        }
        runtimeClasspath += files('build/abs')
    }
}

tasks.withType(JavaCompile) {
    dependsOn compileAbs
    source('build/abs')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'eu.nebulouscloud.optimiser.twin.Main'
}

jar {
    archiveBaseName='optimiser-digital-twin'
    manifest {
        attributes 'Implementation-Title': 'optimiser-digital-twin',
            'Bundle-Version': '0.1'
    }
}

shadowJar {
    // Creates a fat jar, including all dependencies
}

task distJar(type: Copy, dependsOn: shadowJar) {
    description = 'Copies the fat jar into its documented location.'
    group = 'build'
    from shadowJar.archiveFile
    into 'dist/'
}
clean {
    delete 'dist/'
}
assemble.dependsOn distJar


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
